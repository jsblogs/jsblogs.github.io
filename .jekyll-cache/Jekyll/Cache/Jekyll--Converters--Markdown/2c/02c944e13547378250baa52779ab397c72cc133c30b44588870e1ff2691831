I"i<p>This blog will guide you how to deserialize json into java generic types. Suppose we have 2 json as given below.</p>

<h6 id="socialaccountresponsejson">SocialAccountResponse.json</h6>
<noscript><pre>{
  &quot;status&quot;: true,
  &quot;code&quot;: 200,
  &quot;data&quot;: {
    &quot;id&quot;: &quot;123456&quot;,
    &quot;profileUrl&quot;: &quot;https://www.facebook.com/123456&quot;
  }
}</pre></noscript>
<script src="https://gist.github.com/jeetmp3/d55647fc8a5805a70b3aafbde9bd349f.js?file=SocialAccountsResponse.json"> </script>

<h6 id="userresponsejson">UserResponse.json</h6>
<noscript><pre>{
  &quot;status&quot;: true,
  &quot;code&quot;: 200,
  &quot;data&quot;: {
    &quot;name&quot;: &quot;MyBlogs&quot;,
    &quot;email&quot;: &quot;admin@myblogspro.com&quot;
  }
}</pre></noscript>
<script src="https://gist.github.com/jeetmp3/d55647fc8a5805a70b3aafbde9bd349f.js?file=UserResponse.json"> </script>

<p>Both json have common keys, only data object is being change. To deserialize these jsons without generic types we would have to create 2 wrappers with 2 actual data class. But with generic types we only need to create generic class for root keys and actual data class for every object in data key.</p>

<h6 id="genericresponsejava">GenericResponse.java</h6>
<noscript><pre>public class GenericResponse&lt;T&gt; {
    private boolean status;
    private int code;
    private T data;

    public boolean isStatus() {
        return status;
    }

    public void setStatus(boolean status) {
        this.status = status;
    }

    public int getCode() {
        return code;
    }

    public void setCode(int code) {
        this.code = code;
    }

    public T getData() {
        return data;
    }

    public void setData(T data) {
        this.data = data;
    }
}</pre></noscript>
<script src="https://gist.github.com/jeetmp3/312858a4702ec8f7a875d26f04515e26.js?file=GenericResponse.java"> </script>

<h6 id="socialaccountsresponsejava">SocialAccountsResponse.java</h6>
<noscript><pre>public class SocialAccountsResponse {
    private String id;
    private String profileUrl;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getProfileUrl() {
        return profileUrl;
    }

    public void setProfileUrl(String profileUrl) {
        this.profileUrl = profileUrl;
    }
}</pre></noscript>
<script src="https://gist.github.com/jeetmp3/312858a4702ec8f7a875d26f04515e26.js?file=SocialAccountsResponse.java"> </script>

<h6 id="userresponsejava">UserResponse.java</h6>
<noscript><pre>public class UserResponse {
    private String name;
    private String email;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}</pre></noscript>
<script src="https://gist.github.com/jeetmp3/312858a4702ec8f7a875d26f04515e26.js?file=UserResponse.java"> </script>

<p>Now Weâ€™ll deserialize above JSON in Generic class using below libraries</p>

<ol>
  <li><a href="https://github.com/google/gson" target="_blank">Google Gson</a></li>
  <li><a href="https://github.com/FasterXML/jackson-databind" target="_blank">Jackson</a></li>
</ol>

<h4 id="1-deserialize-using-google-gson">1. Deserialize using Google Gson</h4>
<noscript><pre>import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class GsonDeserializer {
  public static void main(String []args) {
        Gson gson = new Gson();
        GenericResponse&lt;UserResponse&gt; response = gson.fromJson(jsonString, new TypeToken&lt;GenericResponse&lt;UserResponse&gt;&gt;(){}.getType());
        System.out.println(response.getData().getName());
        System.out.println(response.getData().getEmail());
        
        GenericResponse&lt;SocialAccountsResponse&gt; socialAccountResponse = gson.fromJson(jsonString, new TypeToken&lt;GenericResponse&lt;SocialAccountsResponse&gt;&gt;(){}.getType());
        System.out.println(socialAccountResponse.getData().getId());
        System.out.println(socialAccountResponse.getData().getProfileUrl());
    }
}</pre></noscript>
<script src="https://gist.github.com/jeetmp3/6879107bd56ee9ede8cfdcfc8bdd1f5f.js?file=GsonDeserializer.java"> </script>

<h4 id="2-deserialize-using-jackson">2. Deserialize using Jackson</h4>
<noscript><pre>import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

public class JacksonDeserializer {
  public static void main(String []args) {
        ObjectMapper mapper = new ObjectMapper();
        GenericResponse&lt;UserResponse&gt; userResponse = mapper.readValue(jsonString, new TypeReference&lt;GenericResponse&lt;UserResponse&gt;&gt;() {});
        System.out.println(userResponse.getData().getName());
        System.out.println(userResponse.getData().getEmail());
        
        GenericResponse&lt;SocialAccountsResponse&gt; socialAccountResponse = mapper.readValue(jsonString, new TypeReference&lt;GenericResponse&lt;SocialAccountsResponse&gt;&gt;() {});
        System.out.println(socialAccountResponse.getData().getId());
        System.out.println(socialAccountResponse.getData().getProfileUrl());
    }
}</pre></noscript>
<script src="https://gist.github.com/jeetmp3/e6650ba72955eb82095d0ead3029df4f.js?file=JacksonDeserializer.java"> </script>

:ET