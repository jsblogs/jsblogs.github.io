I"ƒ7<p>GraphQL is query language for your Rest APIs and gives client power to select exactly what they need. It also provides server side runtime to execute the queries.</p>

<p>GraphQL has 3 major parts</p>
<ol>
  <li>GraphQL server</li>
  <li>GraphQL Schema</li>
  <li>Client</li>
</ol>

<h3 id="graphql-server">GraphQL Server</h3>
<p>GraphQL server is responsible to validate &amp; execute the queries and returns the response as per clientâ€™s need. The client can select the fields as per need and server will return only those selected fields.</p>

<h3 id="graphql-schema">GraphQL Schema</h3>
<p>GraphQL has a specific language called <strong>GraphQL Schema language</strong> to define schema. GraphQL schema consist of the queries and types. As a API owner we can decide what queries &amp; types will be available to the consumer.
The schema has default root object type called <strong>Query</strong> which contains all the queries.
An example schema is</p>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#The root object</span><span class="w">
</span><span class="k">type</span><span class="w"> </span><span class="n">Query</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">hello</span><span class="p">:</span><span class="w"> </span><span class="nb">String</span><span class="w">
    </span><span class="n">greet</span><span class="p">(</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="nb">String</span><span class="p">):</span><span class="w"> </span><span class="nb">String</span><span class="w">
</span><span class="p">}</span><span class="w">
 </span><span class="c">#Defined Type</span><span class="w">
</span><span class="k">type</span><span class="w"> </span><span class="n">User</span><span class="p">{</span><span class="w">
    </span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="nb">String</span><span class="w">
    </span><span class="n">age</span><span class="p">:</span><span class="w"> </span><span class="nb">Int</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>In above schema root object is Query and it has one field called <em>hello</em> and a method <em>greet</em> and both are returning String type. The <em>greet</em> has an input argument <em>name</em> which is a type of String. This means client can pass any string type argument while querying <em>greet</em>.</p>

<p>The User type is defined type which has 2 fields name and age. GraphQL supports several built-in types like String, Int, Float, Boolean, etc. <a href="https://graphql.org/learn/schema/">Click here</a> to read more about graphql schema and types.</p>

<blockquote>
  <p>For every field or query in the Query Type will have corresponding resolver which will be running at GraphQL Server.</p>
</blockquote>

<h3 id="client">Client</h3>
<p>The clients are the consumer. Since GraphQL works over Rest so any rest client can query the graphql. There are few tools which are great for testing. These tools gives the auto-completion features and we can view all possible queries and types.
Some of the tools are <strong>GraphiQL</strong>, <strong>insomnia</strong>.</p>

<h3 id="graphql-java-in-action">GraphQL-Java in Action</h3>
<p>Below code will demonstrate you how to integrate GraphQL in Spring application. So letâ€™s start with the GraphQL schema file.</p>

<p>The code structure will look like</p>

<p><img src="/public/images/graphql/graphql-code-structure.png" alt="GraphQL code structure" /></p>

<h5 id="define-schema-file-usersgraphql">Define schema file users.graphql</h5>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span><span class="w"> </span><span class="n">Query</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">hello</span><span class="p">:</span><span class="w"> </span><span class="nb">String</span><span class="w">
    </span><span class="n">users</span><span class="p">(</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="nb">String</span><span class="p">):</span><span class="w"> </span><span class="n">User</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="k">type</span><span class="w"> </span><span class="n">User</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="nb">String</span><span class="w">
    </span><span class="n">age</span><span class="p">:</span><span class="w"> </span><span class="nb">Int</span><span class="w">
    </span><span class="n">address</span><span class="p">:</span><span class="w"> </span><span class="nb">String</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>Now well start configuring the GraphQL Java objects along with resolvers for the queries (hello &amp; user).</p>

<h5 id="step-1-read--parse-schema-file">Step 1: Read &amp; parse schema file</h5>

<p>Filename: GraphQLSchema.java</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">private</span> <span class="nc">TypeDefinitionRegistry</span> <span class="nf">readAndParseSchemaFile</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">schemaString</span> <span class="o">=</span> <span class="nc">ResourceUtils</span><span class="o">.</span><span class="na">readClasspathResourceContent</span><span class="o">(</span><span class="s">"users.graphql"</span><span class="o">);</span>

        <span class="nc">SchemaParser</span> <span class="n">schemaParser</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SchemaParser</span><span class="o">();</span>
        
        <span class="c1">// parsing schema file and creating typeDefRegistery</span>
        <span class="k">return</span> <span class="n">schemaParser</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">schemaString</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<h5 id="step-2-configure-resolvers">Step 2: Configure Resolvers</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">private</span> <span class="nc">RuntimeWiring</span> <span class="nf">buildRuntimeWiring</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">RuntimeWiring</span><span class="o">.</span><span class="na">newRuntimeWiring</span><span class="o">()</span>
                <span class="o">.</span><span class="na">type</span><span class="o">(</span><span class="s">"Query"</span><span class="o">,</span> <span class="n">builder</span> <span class="o">-&gt;</span> <span class="n">builder</span><span class="o">.</span><span class="na">dataFetchers</span><span class="o">(</span><span class="n">buildDataFetchers</span><span class="o">()))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">DataFetcher</span><span class="o">&gt;</span> <span class="nf">buildDataFetchers</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">DataFetcher</span><span class="o">&gt;</span> <span class="n">dataFetchers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">dataFetchers</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"hello"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StaticDataFetcher</span><span class="o">(</span><span class="s">"Welcome to GraphQL world."</span><span class="o">));</span>
        <span class="n">dataFetchers</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"users"</span><span class="o">,</span> <span class="n">env</span> <span class="o">-&gt;</span> <span class="nc">User</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"John"</span><span class="o">,</span> <span class="mi">28</span><span class="o">,</span> <span class="s">"India"</span><span class="o">));</span>
        <span class="k">return</span> <span class="n">dataFetchers</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<h5 id="step-3-prepare-graphql-object-and-execute-query">Step 3: Prepare GraphQL object and execute query</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// We need to create GraphQLSchema Object but before that we need to configure resolvers </span>
        <span class="nc">GraphQLSchema</span> <span class="n">graphQLSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SchemaGenerator</span><span class="o">().</span><span class="na">makeExecutableSchema</span><span class="o">(</span><span class="n">readAndParseSchemaFile</span><span class="o">(),</span> <span class="n">buildRuntimeWiring</span><span class="o">());</span>
        <span class="n">graphQL</span> <span class="o">=</span> <span class="nc">GraphQL</span><span class="o">.</span><span class="na">newGraphQL</span><span class="o">(</span><span class="n">graphQLSchema</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="nc">ExecutionResult</span> <span class="nf">executeQuery</span><span class="o">(</span><span class="nc">String</span> <span class="n">graphQLQuery</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">graphQL</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">graphQLQuery</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<h5 id="step-4-serve-user-queries-on-the-endpoint-graphql">Step 4: Serve user queries on the endpoint (/graphql)</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@RestController</span>
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">GraphQLController</span> <span class="o">{</span>
    
        <span class="kd">private</span> <span class="kd">final</span> <span class="nc">GraphQLService</span> <span class="n">graphQLService</span><span class="o">;</span>
    
        <span class="nd">@Autowired</span>
        <span class="kd">public</span> <span class="nf">GraphQLController</span><span class="o">(</span><span class="nc">GraphQLService</span> <span class="n">graphQLService</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">graphQLService</span> <span class="o">=</span> <span class="n">graphQLService</span><span class="o">;</span>
        <span class="o">}</span>
    
        <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/graphql"</span><span class="o">)</span>
        <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">executeQuery</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">GraphQLRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">graphQLService</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getQuery</span><span class="o">()).</span><span class="na">toSpecification</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<h5 id="step-5-user-graphiql-or-rest-to-execute-graphql-query">Step 5: User GraphiQL or Rest to execute graphql query</h5>
<p>GraphiQL resource links</p>
<ul>
  <li><a href="https://github.com/graphql/graphiql">Download Link</a></li>
  <li><a href="https://github.com/graphql/graphiql">Source Code</a></li>
</ul>

<p>Add your /graphql controllerâ€™s endpoint in GraphiQL and start executing query</p>

<p><img src="/public/images/graphql/gqlq1.png" alt="Query hello" /></p>

<p>We can ask the response fields and graphql will serve only selected fields.</p>
<ol>
  <li>Query users for name only</li>
</ol>

<p><img src="/public/images/graphql/gqlq2.png" alt="Name only" /></p>

<ol>
  <li>Query users for all fields</li>
</ol>

<p><img src="/public/images/graphql/gqlq3.png" alt="All fields" /></p>

<p>We can ask for multiple queries in single request</p>

<p><img src="/public/images/graphql/gqlq4.png" alt="Multiple queries" /></p>

<p>Even same query with multiple times with alias</p>

<p><img src="/public/images/graphql/gqlq5.png" alt="Duplicate queries" /></p>

<p>You can find complete code <a href="https://github.com/jeetmp3/tutorials/tree/master/graphql-java-intro">here</a></p>

<p>Happy Coding ðŸ˜€ðŸ˜€ðŸ˜€ !!!</p>
:ET